// <auto-generated />
using System;
using MakeFriendSolution.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MakeFriendSolution.Migrations
{
    [DbContext(typeof(MakeFriendDbContext))]
    [Migration("20210710110229_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MakeFriendSolution.Models.Access", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorizeCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UnauthorizeCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Accesses");
                });

            modelBuilder.Entity("MakeFriendSolution.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AvatarPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int>("FindAgeGroup")
                        .HasColumnType("int");

                    b.Property<int>("FindPeople")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<bool>("IsInfoUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsUpdatePosition")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Job")
                        .HasColumnType("int");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<int>("Location")
                        .HasColumnType("int");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<int>("NumberOfFiends")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("NumberOfImages")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("NumberOfLikes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("NumberOfPasswordConfirmations")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("PasswordForgottenCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasDefaultValue("");

                    b.Property<DateTime>("PasswordForgottenPeriod")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("TypeAccount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2021, 7, 10, 18, 2, 28, 787, DateTimeKind.Local).AddTicks(9589));

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec826af8-0310-48cf-8a14-da11bdb1c96d"),
                            AvatarPath = "tam.jpg",
                            CreatedAt = new DateTime(2020, 9, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dob = new DateTime(1999, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tam@gmail.com",
                            FindAgeGroup = 0,
                            FindPeople = 0,
                            FullName = "Nguyễn Thành Tâm",
                            Gender = 1,
                            Height = 170,
                            IsInfoUpdated = true,
                            IsUpdatePosition = false,
                            Job = 7,
                            Latitude = 0.0,
                            Location = 37,
                            Longitude = 0.0,
                            NumberOfFiends = 0,
                            NumberOfImages = 0,
                            NumberOfLikes = 0,
                            NumberOfPasswordConfirmations = 0,
                            PassWord = "admin",
                            PasswordForgottenPeriod = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = "0396925225",
                            Role = 0,
                            Status = 0,
                            Summary = "Tôi là Tâm, rất vui khi được làm quen với bạn",
                            Title = "Thông tin của tôi",
                            TypeAccount = 0,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Admin",
                            Weight = 65
                        },
                        new
                        {
                            Id = new Guid("ec826af8-0310-48cf-8a14-da11bdb1c967"),
                            AvatarPath = "nhung2.jpg",
                            CreatedAt = new DateTime(2020, 9, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dob = new DateTime(1999, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nhung@gmail.com",
                            FindAgeGroup = 0,
                            FindPeople = 1,
                            FullName = "Nguyễn Huyền Nhung",
                            Gender = 0,
                            Height = 170,
                            IsInfoUpdated = true,
                            IsUpdatePosition = false,
                            Job = 21,
                            Latitude = 0.0,
                            Location = 37,
                            Longitude = 0.0,
                            NumberOfFiends = 0,
                            NumberOfImages = 0,
                            NumberOfLikes = 0,
                            NumberOfPasswordConfirmations = 0,
                            PassWord = "1111",
                            PasswordForgottenPeriod = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = "0369875463",
                            Role = 1,
                            Status = 0,
                            Summary = "Tôi là Tâm, rất vui khi được làm quen với bạn",
                            Title = "Thông tin của tôi",
                            TypeAccount = 0,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "nhung2",
                            Weight = 65
                        },
                        new
                        {
                            Id = new Guid("ec826af8-0310-48cf-8a14-da11bdb1c96e"),
                            AvatarPath = "vuong.jpg",
                            CreatedAt = new DateTime(2020, 9, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dob = new DateTime(1999, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "vuong@gmail.com",
                            FindAgeGroup = 0,
                            FindPeople = 0,
                            FullName = "Nguyên Vương",
                            Gender = 1,
                            Height = 170,
                            IsInfoUpdated = true,
                            IsUpdatePosition = false,
                            Job = 1,
                            Latitude = 0.0,
                            Location = 38,
                            Longitude = 0.0,
                            NumberOfFiends = 0,
                            NumberOfImages = 0,
                            NumberOfLikes = 0,
                            NumberOfPasswordConfirmations = 0,
                            PassWord = "1111",
                            PasswordForgottenPeriod = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = "0396925225",
                            Role = 0,
                            Status = 0,
                            Summary = "Tôi là Vương, rất vui khi được làm quen với bạn",
                            Title = "Thông tin của tôi",
                            TypeAccount = 0,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "vuong",
                            Weight = 65
                        },
                        new
                        {
                            Id = new Guid("ec826af8-0310-48cf-8a14-da11bdb1c96f"),
                            AvatarPath = "hieu.jpg",
                            CreatedAt = new DateTime(2020, 9, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dob = new DateTime(1999, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hieu@gmail.com",
                            FindAgeGroup = 0,
                            FindPeople = 0,
                            FullName = "Võ Minh Hiếu",
                            Gender = 1,
                            Height = 170,
                            IsInfoUpdated = true,
                            IsUpdatePosition = false,
                            Job = 4,
                            Latitude = 0.0,
                            Location = 37,
                            Longitude = 0.0,
                            NumberOfFiends = 0,
                            NumberOfImages = 0,
                            NumberOfLikes = 0,
                            NumberOfPasswordConfirmations = 0,
                            PassWord = "1111",
                            PasswordForgottenPeriod = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = "0396925225",
                            Role = 0,
                            Status = 0,
                            Summary = "Tôi là Tâm, rất vui khi được làm quen với bạn",
                            Title = "Thông tin của tôi",
                            TypeAccount = 0,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "hieu",
                            Weight = 65
                        },
                        new
                        {
                            Id = new Guid("ec826af8-0310-48cf-8a14-da11bdb1c965"),
                            AvatarPath = "tien.jpg",
                            CreatedAt = new DateTime(2020, 9, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dob = new DateTime(1999, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tien@gmail.com",
                            FindAgeGroup = 0,
                            FindPeople = 0,
                            FullName = "Lê Minh Tiến",
                            Gender = 1,
                            Height = 170,
                            IsInfoUpdated = true,
                            IsUpdatePosition = false,
                            Job = 10,
                            Latitude = 0.0,
                            Location = 37,
                            Longitude = 0.0,
                            NumberOfFiends = 0,
                            NumberOfImages = 0,
                            NumberOfLikes = 0,
                            NumberOfPasswordConfirmations = 0,
                            PassWord = "1111",
                            PasswordForgottenPeriod = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = "0396925225",
                            Role = 0,
                            Status = 0,
                            Summary = "Tôi là Tâm, rất vui khi được làm quen với bạn",
                            Title = "Thông tin của tôi",
                            TypeAccount = 0,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "tien",
                            Weight = 65
                        },
                        new
                        {
                            Id = new Guid("ec826af8-0310-48cf-8a14-da11bdb1c961"),
                            AvatarPath = "dinh.jpg",
                            CreatedAt = new DateTime(2020, 9, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dob = new DateTime(1999, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "dinh@gmail.com",
                            FindAgeGroup = 0,
                            FindPeople = 0,
                            FullName = "Lê Kim Đỉnh",
                            Gender = 1,
                            Height = 170,
                            IsInfoUpdated = true,
                            IsUpdatePosition = false,
                            Job = 12,
                            Latitude = 0.0,
                            Location = 37,
                            Longitude = 0.0,
                            NumberOfFiends = 0,
                            NumberOfImages = 0,
                            NumberOfLikes = 0,
                            NumberOfPasswordConfirmations = 0,
                            PassWord = "1111",
                            PasswordForgottenPeriod = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = "0396925225",
                            Role = 0,
                            Status = 0,
                            Summary = "Tôi là Tâm, rất vui khi được làm quen với bạn",
                            Title = "Thông tin của tôi",
                            TypeAccount = 0,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Dinh",
                            Weight = 65
                        },
                        new
                        {
                            Id = new Guid("ec826af8-0310-48cf-8a14-da11bdb1c962"),
                            AvatarPath = "dat.jpg",
                            CreatedAt = new DateTime(2020, 9, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dob = new DateTime(1999, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "dat@gmail.com",
                            FindAgeGroup = 0,
                            FindPeople = 0,
                            FullName = "Hồ Quốc Đạt",
                            Gender = 1,
                            Height = 170,
                            IsInfoUpdated = true,
                            IsUpdatePosition = false,
                            Job = 13,
                            Latitude = 0.0,
                            Location = 37,
                            Longitude = 0.0,
                            NumberOfFiends = 0,
                            NumberOfImages = 0,
                            NumberOfLikes = 0,
                            NumberOfPasswordConfirmations = 0,
                            PassWord = "1111",
                            PasswordForgottenPeriod = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = "0396925225",
                            Role = 0,
                            Status = 0,
                            Summary = "Tôi là Tâm, rất vui khi được làm quen với bạn",
                            Title = "Thông tin của tôi",
                            TypeAccount = 0,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Dat",
                            Weight = 65
                        },
                        new
                        {
                            Id = new Guid("ec826af8-0310-48cf-8a14-da11bdb1c963"),
                            AvatarPath = "son.jpg",
                            CreatedAt = new DateTime(2020, 9, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dob = new DateTime(1999, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "son@gmail.com",
                            FindAgeGroup = 0,
                            FindPeople = 0,
                            FullName = "Phan Sơn",
                            Gender = 1,
                            Height = 170,
                            IsInfoUpdated = true,
                            IsUpdatePosition = false,
                            Job = 8,
                            Latitude = 0.0,
                            Location = 37,
                            Longitude = 0.0,
                            NumberOfFiends = 0,
                            NumberOfImages = 0,
                            NumberOfLikes = 0,
                            NumberOfPasswordConfirmations = 0,
                            PassWord = "1111",
                            PasswordForgottenPeriod = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = "0396925225",
                            Role = 0,
                            Status = 0,
                            Summary = "Tôi là Tâm, rất vui khi được làm quen với bạn",
                            Title = "Thông tin của tôi",
                            TypeAccount = 0,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Son",
                            Weight = 65
                        },
                        new
                        {
                            Id = new Guid("ec826af8-0310-48cf-8a14-da11bdb1c964"),
                            AvatarPath = "duc.jpg",
                            CreatedAt = new DateTime(2020, 9, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dob = new DateTime(1999, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "duc@gmail.com",
                            FindAgeGroup = 0,
                            FindPeople = 0,
                            FullName = "Trí Đức",
                            Gender = 1,
                            Height = 170,
                            IsInfoUpdated = true,
                            IsUpdatePosition = false,
                            Job = 27,
                            Latitude = 0.0,
                            Location = 37,
                            Longitude = 0.0,
                            NumberOfFiends = 0,
                            NumberOfImages = 0,
                            NumberOfLikes = 0,
                            NumberOfPasswordConfirmations = 0,
                            PassWord = "1111",
                            PasswordForgottenPeriod = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = "0396925225",
                            Role = 0,
                            Status = 0,
                            Summary = "Tôi là Tâm, rất vui khi được làm quen với bạn",
                            Title = "Thông tin của tôi",
                            TypeAccount = 0,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Duc",
                            Weight = 65
                        },
                        new
                        {
                            Id = new Guid("ec826af8-0310-48cf-8a14-da11bdb1c966"),
                            AvatarPath = "nhung.jpg",
                            CreatedAt = new DateTime(2020, 9, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dob = new DateTime(1999, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nhung1@gmail.com",
                            FindAgeGroup = 0,
                            FindPeople = 1,
                            FullName = "Gia Nhung",
                            Gender = 0,
                            Height = 170,
                            IsInfoUpdated = true,
                            IsUpdatePosition = false,
                            Job = 6,
                            Latitude = 0.0,
                            Location = 37,
                            Longitude = 0.0,
                            NumberOfFiends = 0,
                            NumberOfImages = 0,
                            NumberOfLikes = 0,
                            NumberOfPasswordConfirmations = 0,
                            PassWord = "1111",
                            PasswordForgottenPeriod = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = "0396925225",
                            Role = 0,
                            Status = 0,
                            Summary = "Tôi là Tâm, rất vui khi được làm quen với bạn",
                            Title = "Thông tin của tôi",
                            TypeAccount = 0,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "GiaNhung",
                            Weight = 65
                        },
                        new
                        {
                            Id = new Guid("ec826af8-0310-48cf-8a14-da11bdb1c968"),
                            AvatarPath = "diem.jpg",
                            CreatedAt = new DateTime(2020, 9, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dob = new DateTime(1999, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "diem@gmail.com",
                            FindAgeGroup = 0,
                            FindPeople = 1,
                            FullName = "Kiều Diễm",
                            Gender = 0,
                            Height = 170,
                            IsInfoUpdated = true,
                            IsUpdatePosition = false,
                            Job = 22,
                            Latitude = 0.0,
                            Location = 37,
                            Longitude = 0.0,
                            NumberOfFiends = 0,
                            NumberOfImages = 0,
                            NumberOfLikes = 0,
                            NumberOfPasswordConfirmations = 0,
                            PassWord = "1111",
                            PasswordForgottenPeriod = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = "0396925225",
                            Role = 0,
                            Status = 0,
                            Summary = "Tôi là Tâm, rất vui khi được làm quen với bạn",
                            Title = "Thông tin của tôi",
                            TypeAccount = 0,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Diem",
                            Weight = 65
                        },
                        new
                        {
                            Id = new Guid("ec826af8-0310-48cf-8a14-da11bdb1c969"),
                            AvatarPath = "han.jpg",
                            CreatedAt = new DateTime(2020, 9, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dob = new DateTime(1999, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "han@gmail.com",
                            FindAgeGroup = 0,
                            FindPeople = 1,
                            FullName = "Gia Hân",
                            Gender = 0,
                            Height = 170,
                            IsInfoUpdated = true,
                            IsUpdatePosition = false,
                            Job = 18,
                            Latitude = 0.0,
                            Location = 37,
                            Longitude = 0.0,
                            NumberOfFiends = 0,
                            NumberOfImages = 0,
                            NumberOfLikes = 0,
                            NumberOfPasswordConfirmations = 0,
                            PassWord = "1111",
                            PasswordForgottenPeriod = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = "0396925225",
                            Role = 0,
                            Status = 0,
                            Summary = "Tôi là Tâm, rất vui khi được làm quen với bạn",
                            Title = "Thông tin của tôi",
                            TypeAccount = 0,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Han",
                            Weight = 65
                        },
                        new
                        {
                            Id = new Guid("ec826af8-0310-48cf-8a14-da11bdb1c977"),
                            AvatarPath = "mai.jpg",
                            CreatedAt = new DateTime(2020, 9, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dob = new DateTime(1999, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mai@gmail.com",
                            FindAgeGroup = 0,
                            FindPeople = 1,
                            FullName = "Xuân Maiii",
                            Gender = 0,
                            Height = 170,
                            IsInfoUpdated = true,
                            IsUpdatePosition = false,
                            Job = 24,
                            Latitude = 0.0,
                            Location = 37,
                            Longitude = 0.0,
                            NumberOfFiends = 0,
                            NumberOfImages = 0,
                            NumberOfLikes = 0,
                            NumberOfPasswordConfirmations = 0,
                            PassWord = "1111",
                            PasswordForgottenPeriod = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = "0396925225",
                            Role = 0,
                            Status = 0,
                            Summary = "Tôi là Tâm, rất vui khi được làm quen với bạn",
                            Title = "Thông tin của tôi",
                            TypeAccount = 0,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Mai",
                            Weight = 65
                        });
                });

            modelBuilder.Entity("MakeFriendSolution.Models.BlockUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("FromUserId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsLock")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("ToUserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("BlockUsers");
                });

            modelBuilder.Entity("MakeFriendSolution.Models.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("FromUserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ToUserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("MakeFriendSolution.Models.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsCalculated")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSearchFeature")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("WeightRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValue(1.0);

                    b.HasKey("Id");

                    b.ToTable("Features");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsCalculated = true,
                            IsSearchFeature = true,
                            Name = "Dáng người",
                            WeightRate = 0.90000000000000002
                        },
                        new
                        {
                            Id = 2,
                            IsCalculated = true,
                            IsSearchFeature = true,
                            Name = "Tính cách",
                            WeightRate = 0.94999999999999996
                        },
                        new
                        {
                            Id = 3,
                            IsCalculated = true,
                            IsSearchFeature = true,
                            Name = "Phong cách",
                            WeightRate = 0.84999999999999998
                        },
                        new
                        {
                            Id = 4,
                            IsCalculated = true,
                            IsSearchFeature = true,
                            Name = "Lối sống",
                            WeightRate = 0.82999999999999996
                        },
                        new
                        {
                            Id = 5,
                            IsCalculated = true,
                            IsSearchFeature = false,
                            Name = "Xem phim",
                            WeightRate = 0.80000000000000004
                        },
                        new
                        {
                            Id = 6,
                            IsCalculated = true,
                            IsSearchFeature = false,
                            Name = "Đọc sách",
                            WeightRate = 0.75
                        },
                        new
                        {
                            Id = 7,
                            IsCalculated = true,
                            IsSearchFeature = false,
                            Name = "Máy tính",
                            WeightRate = 0.68000000000000005
                        },
                        new
                        {
                            Id = 8,
                            IsCalculated = true,
                            IsSearchFeature = false,
                            Name = "Cây cảnh",
                            WeightRate = 0.64000000000000001
                        },
                        new
                        {
                            Id = 9,
                            IsCalculated = true,
                            IsSearchFeature = false,
                            Name = "Mua sắm",
                            WeightRate = 0.87
                        },
                        new
                        {
                            Id = 10,
                            IsCalculated = true,
                            IsSearchFeature = false,
                            Name = "Thú cưng",
                            WeightRate = 0.88
                        },
                        new
                        {
                            Id = 11,
                            IsCalculated = true,
                            IsSearchFeature = false,
                            Name = "Du lịch",
                            WeightRate = 0.80000000000000004
                        },
                        new
                        {
                            Id = 12,
                            IsCalculated = true,
                            IsSearchFeature = false,
                            Name = "Thiện nguyện",
                            WeightRate = 0.64000000000000001
                        },
                        new
                        {
                            Id = 13,
                            IsCalculated = true,
                            IsSearchFeature = false,
                            Name = "Cắm trại",
                            WeightRate = 0.75
                        },
                        new
                        {
                            Id = 14,
                            IsCalculated = true,
                            IsSearchFeature = false,
                            Name = "Chơi game",
                            WeightRate = 0.76000000000000001
                        },
                        new
                        {
                            Id = 15,
                            IsCalculated = true,
                            IsSearchFeature = false,
                            Name = "Thể thao",
                            WeightRate = 0.85999999999999999
                        });
                });

            modelBuilder.Entity("MakeFriendSolution.Models.FeatureDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.ToTable("FeatureDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Nhỏ nhắn",
                            FeatureId = 1,
                            Weight = -2
                        },
                        new
                        {
                            Id = 2,
                            Content = "Mảnh mai",
                            FeatureId = 1,
                            Weight = -1
                        },
                        new
                        {
                            Id = 3,
                            Content = "Cân đối",
                            FeatureId = 1,
                            Weight = 1
                        },
                        new
                        {
                            Id = 4,
                            Content = "Mũm mĩm",
                            FeatureId = 1,
                            Weight = 2
                        },
                        new
                        {
                            Id = 5,
                            Content = "Cao lớn",
                            FeatureId = 1,
                            Weight = 3
                        },
                        new
                        {
                            Id = 6,
                            Content = "Vạm vỡ",
                            FeatureId = 1,
                            Weight = 6
                        },
                        new
                        {
                            Id = 7,
                            Content = "Lạnh lùng",
                            FeatureId = 2,
                            Weight = -3
                        },
                        new
                        {
                            Id = 8,
                            Content = "Thật thà",
                            FeatureId = 2,
                            Weight = -2
                        },
                        new
                        {
                            Id = 9,
                            Content = "Kín đáo",
                            FeatureId = 2,
                            Weight = -1
                        },
                        new
                        {
                            Id = 10,
                            Content = "Tự tin",
                            FeatureId = 2,
                            Weight = 1
                        },
                        new
                        {
                            Id = 11,
                            Content = "Lịch sự",
                            FeatureId = 2,
                            Weight = 2
                        },
                        new
                        {
                            Id = 12,
                            Content = "Vui vẻ",
                            FeatureId = 2,
                            Weight = 3
                        },
                        new
                        {
                            Id = 13,
                            Content = "Ngốc nghếch",
                            FeatureId = 2,
                            Weight = 4
                        },
                        new
                        {
                            Id = 14,
                            Content = "Sang trọng",
                            FeatureId = 3,
                            Weight = -4
                        },
                        new
                        {
                            Id = 15,
                            Content = "Thành đạt",
                            FeatureId = 3,
                            Weight = -3
                        },
                        new
                        {
                            Id = 16,
                            Content = "Quyến rũ",
                            FeatureId = 3,
                            Weight = -2
                        },
                        new
                        {
                            Id = 17,
                            Content = "Thể thao",
                            FeatureId = 3,
                            Weight = -1
                        },
                        new
                        {
                            Id = 18,
                            Content = "Thời trang",
                            FeatureId = 3,
                            Weight = 1
                        },
                        new
                        {
                            Id = 19,
                            Content = "Sành điệu",
                            FeatureId = 3,
                            Weight = 2
                        },
                        new
                        {
                            Id = 20,
                            Content = "Giản dị",
                            FeatureId = 3,
                            Weight = 3
                        },
                        new
                        {
                            Id = 21,
                            Content = "Tối giản",
                            FeatureId = 3,
                            Weight = 4
                        },
                        new
                        {
                            Id = 22,
                            Content = "Độc lập",
                            FeatureId = 4,
                            Weight = -2
                        },
                        new
                        {
                            Id = 23,
                            Content = "Tự do",
                            FeatureId = 4,
                            Weight = -1
                        },
                        new
                        {
                            Id = 24,
                            Content = "Lạc quan",
                            FeatureId = 4,
                            Weight = 1
                        },
                        new
                        {
                            Id = 25,
                            Content = "Hướng nội",
                            FeatureId = 4,
                            Weight = 2
                        },
                        new
                        {
                            Id = 26,
                            Content = "Khuôn phép",
                            FeatureId = 4,
                            Weight = 5
                        },
                        new
                        {
                            Id = 27,
                            Content = "Không thích",
                            FeatureId = 5,
                            Weight = -2
                        },
                        new
                        {
                            Id = 28,
                            Content = "Bình thường",
                            FeatureId = 5,
                            Weight = -1
                        },
                        new
                        {
                            Id = 29,
                            Content = "Thích",
                            FeatureId = 5,
                            Weight = 1
                        },
                        new
                        {
                            Id = 30,
                            Content = "Rất thích",
                            FeatureId = 5,
                            Weight = 2
                        },
                        new
                        {
                            Id = 31,
                            Content = "Không thích",
                            FeatureId = 6,
                            Weight = -2
                        },
                        new
                        {
                            Id = 32,
                            Content = "Bình thường",
                            FeatureId = 6,
                            Weight = -1
                        },
                        new
                        {
                            Id = 33,
                            Content = "Thích",
                            FeatureId = 6,
                            Weight = 1
                        },
                        new
                        {
                            Id = 34,
                            Content = "Rất thích",
                            FeatureId = 6,
                            Weight = 2
                        },
                        new
                        {
                            Id = 35,
                            Content = "Không thích",
                            FeatureId = 7,
                            Weight = -2
                        },
                        new
                        {
                            Id = 36,
                            Content = "Bình thường",
                            FeatureId = 7,
                            Weight = -1
                        },
                        new
                        {
                            Id = 37,
                            Content = "Thích",
                            FeatureId = 7,
                            Weight = 1
                        },
                        new
                        {
                            Id = 38,
                            Content = "Rất thích",
                            FeatureId = 7,
                            Weight = 2
                        },
                        new
                        {
                            Id = 39,
                            Content = "Không thích",
                            FeatureId = 8,
                            Weight = -2
                        },
                        new
                        {
                            Id = 40,
                            Content = "Bình thường",
                            FeatureId = 8,
                            Weight = -1
                        },
                        new
                        {
                            Id = 41,
                            Content = "Thích",
                            FeatureId = 8,
                            Weight = 1
                        },
                        new
                        {
                            Id = 42,
                            Content = "Rất thích",
                            FeatureId = 8,
                            Weight = 2
                        },
                        new
                        {
                            Id = 43,
                            Content = "Không thích",
                            FeatureId = 9,
                            Weight = -2
                        },
                        new
                        {
                            Id = 44,
                            Content = "Bình thường",
                            FeatureId = 9,
                            Weight = -1
                        },
                        new
                        {
                            Id = 45,
                            Content = "Thích",
                            FeatureId = 9,
                            Weight = 1
                        },
                        new
                        {
                            Id = 46,
                            Content = "Rất thích",
                            FeatureId = 9,
                            Weight = 2
                        },
                        new
                        {
                            Id = 47,
                            Content = "Không thích",
                            FeatureId = 10,
                            Weight = -2
                        },
                        new
                        {
                            Id = 48,
                            Content = "Bình thường",
                            FeatureId = 10,
                            Weight = -1
                        },
                        new
                        {
                            Id = 49,
                            Content = "Thích",
                            FeatureId = 10,
                            Weight = 1
                        },
                        new
                        {
                            Id = 50,
                            Content = "Rất thích",
                            FeatureId = 10,
                            Weight = 2
                        },
                        new
                        {
                            Id = 51,
                            Content = "Không thích",
                            FeatureId = 11,
                            Weight = -2
                        },
                        new
                        {
                            Id = 52,
                            Content = "Bình thường",
                            FeatureId = 11,
                            Weight = -1
                        },
                        new
                        {
                            Id = 53,
                            Content = "Thích",
                            FeatureId = 11,
                            Weight = 1
                        },
                        new
                        {
                            Id = 54,
                            Content = "Rất thích",
                            FeatureId = 11,
                            Weight = 2
                        },
                        new
                        {
                            Id = 55,
                            Content = "Không thích",
                            FeatureId = 12,
                            Weight = -2
                        },
                        new
                        {
                            Id = 56,
                            Content = "Bình thường",
                            FeatureId = 12,
                            Weight = -1
                        },
                        new
                        {
                            Id = 57,
                            Content = "Thích",
                            FeatureId = 12,
                            Weight = 1
                        },
                        new
                        {
                            Id = 58,
                            Content = "Rất thích",
                            FeatureId = 12,
                            Weight = 2
                        },
                        new
                        {
                            Id = 59,
                            Content = "Không thích",
                            FeatureId = 13,
                            Weight = -2
                        },
                        new
                        {
                            Id = 60,
                            Content = "Bình thường",
                            FeatureId = 13,
                            Weight = -1
                        },
                        new
                        {
                            Id = 61,
                            Content = "Thích",
                            FeatureId = 13,
                            Weight = 1
                        },
                        new
                        {
                            Id = 62,
                            Content = "Rất thích",
                            FeatureId = 13,
                            Weight = 2
                        },
                        new
                        {
                            Id = 63,
                            Content = "Không thích",
                            FeatureId = 14,
                            Weight = -2
                        },
                        new
                        {
                            Id = 64,
                            Content = "Bình thường",
                            FeatureId = 14,
                            Weight = -1
                        },
                        new
                        {
                            Id = 65,
                            Content = "Thích",
                            FeatureId = 14,
                            Weight = 1
                        },
                        new
                        {
                            Id = 66,
                            Content = "Rất thích",
                            FeatureId = 14,
                            Weight = 2
                        },
                        new
                        {
                            Id = 67,
                            Content = "Không thích",
                            FeatureId = 15,
                            Weight = -2
                        },
                        new
                        {
                            Id = 68,
                            Content = "Bình thường",
                            FeatureId = 15,
                            Weight = -1
                        },
                        new
                        {
                            Id = 69,
                            Content = "Thích",
                            FeatureId = 15,
                            Weight = 1
                        },
                        new
                        {
                            Id = 70,
                            Content = "Rất thích",
                            FeatureId = 15,
                            Weight = 2
                        });
                });

            modelBuilder.Entity("MakeFriendSolution.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("varchar(400) CHARACTER SET utf8mb4")
                        .HasMaxLength(400);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Vote")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("MakeFriendSolution.Models.Follow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("FromUserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ToUserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("Follows");
                });

            modelBuilder.Entity("MakeFriendSolution.Models.HaveMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(5000);

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("HaveMessages");
                });

            modelBuilder.Entity("MakeFriendSolution.Models.ImageScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AutoFilter")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("Drawings")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValue(0.0);

                    b.Property<double>("Hentai")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValue(0.0);

                    b.Property<double>("Neutral")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValue(0.0);

                    b.Property<double>("Porn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValue(0.0);

                    b.Property<double>("Sexy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValue(0.0);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("ImageScores");
                });

            modelBuilder.Entity("MakeFriendSolution.Models.LikeImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("UserId");

                    b.ToTable("LikeImages");
                });

            modelBuilder.Entity("MakeFriendSolution.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("FromId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ToId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("MakeFriendSolution.Models.Relationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("FromId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("HasRelationship")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsAccept")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("RelationShipType")
                        .HasColumnType("int");

                    b.Property<Guid>("ToId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.ToTable("Relationships");
                });

            modelBuilder.Entity("MakeFriendSolution.Models.SearchFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FeatureDetailId")
                        .HasColumnType("int");

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("FeatureDetailId");

                    b.HasIndex("FeatureId");

                    b.HasIndex("UserId");

                    b.ToTable("SearchFeatures");
                });

            modelBuilder.Entity("MakeFriendSolution.Models.SimilarityFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2021, 7, 10, 18, 2, 28, 813, DateTimeKind.Local).AddTicks(8189));

                    b.HasKey("Id");

                    b.ToTable("SimilariryFeatures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UpdatedAt = new DateTime(2021, 7, 10, 18, 2, 28, 824, DateTimeKind.Local).AddTicks(9217)
                        });
                });

            modelBuilder.Entity("MakeFriendSolution.Models.SimilarityScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("FromUserId")
                        .HasColumnType("char(36)");

                    b.Property<double>("Score")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValue(0.0);

                    b.Property<Guid>("ToUserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.ToTable("SimilarityScores");
                });

            modelBuilder.Entity("MakeFriendSolution.Models.ThumbnailImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("NumberOflikes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasDefaultValue("Image title");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ThumbnailImages");
                });

            modelBuilder.Entity("MakeFriendSolution.Models.UserFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FeatureDetailId")
                        .HasColumnType("int");

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("FeatureDetailId");

                    b.HasIndex("FeatureId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFeatures");
                });

            modelBuilder.Entity("MakeFriendSolution.Models.BlockUser", b =>
                {
                    b.HasOne("MakeFriendSolution.Models.AppUser", "FromUser")
                        .WithMany("BlockedByUsers")
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MakeFriendSolution.Models.AppUser", "ToUser")
                        .WithMany("UserWasBlock")
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("MakeFriendSolution.Models.Favorite", b =>
                {
                    b.HasOne("MakeFriendSolution.Models.AppUser", "FromUser")
                        .WithMany("Favorited")
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MakeFriendSolution.Models.AppUser", "ToUser")
                        .WithMany("BeingFavoritedBy")
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("MakeFriendSolution.Models.FeatureDetail", b =>
                {
                    b.HasOne("MakeFriendSolution.Models.Feature", "Feature")
                        .WithMany("FeatureDetails")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("MakeFriendSolution.Models.Feedback", b =>
                {
                    b.HasOne("MakeFriendSolution.Models.AppUser", "AppUser")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("MakeFriendSolution.Models.Follow", b =>
                {
                    b.HasOne("MakeFriendSolution.Models.AppUser", "FromUser")
                        .WithMany("Followed")
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MakeFriendSolution.Models.AppUser", "ToUser")
                        .WithMany("BeingFollowedBy")
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("MakeFriendSolution.Models.HaveMessage", b =>
                {
                    b.HasOne("MakeFriendSolution.Models.AppUser", "Receiver")
                        .WithMany("ReceiveMessages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MakeFriendSolution.Models.AppUser", "Sender")
                        .WithMany("SendMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("MakeFriendSolution.Models.LikeImage", b =>
                {
                    b.HasOne("MakeFriendSolution.Models.ThumbnailImage", "Image")
                        .WithMany("LikeImages")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MakeFriendSolution.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MakeFriendSolution.Models.Relationship", b =>
                {
                    b.HasOne("MakeFriendSolution.Models.AppUser", "FromUser")
                        .WithMany("RelationshipFrom")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MakeFriendSolution.Models.AppUser", "ToUser")
                        .WithMany("RelationshipTo")
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("MakeFriendSolution.Models.SearchFeature", b =>
                {
                    b.HasOne("MakeFriendSolution.Models.FeatureDetail", "FeatureDetail")
                        .WithMany("SearchFeatures")
                        .HasForeignKey("FeatureDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MakeFriendSolution.Models.Feature", "Feature")
                        .WithMany("SearchFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MakeFriendSolution.Models.AppUser", "User")
                        .WithMany("SearchFeatures")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("MakeFriendSolution.Models.SimilarityScore", b =>
                {
                    b.HasOne("MakeFriendSolution.Models.AppUser", "FromUser")
                        .WithMany("SimilarityScores")
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("MakeFriendSolution.Models.ThumbnailImage", b =>
                {
                    b.HasOne("MakeFriendSolution.Models.AppUser", "User")
                        .WithMany("ThumbnailImages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MakeFriendSolution.Models.UserFeature", b =>
                {
                    b.HasOne("MakeFriendSolution.Models.FeatureDetail", "FeatureDetail")
                        .WithMany("UserFeatures")
                        .HasForeignKey("FeatureDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MakeFriendSolution.Models.Feature", "Feature")
                        .WithMany("UserFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MakeFriendSolution.Models.AppUser", "User")
                        .WithMany("HaveFeatures")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
